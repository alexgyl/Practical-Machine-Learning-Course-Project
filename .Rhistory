training = read.csv("pml-training.csv")
head(training)
View(training)
summary(training)
testing = read.csv("pml-testing.csv")
str(training)
missing = apply(X = training, MARGIN = 2, FUN = function(x){sum(is.na(x))})
missing
summary(missin)
summary(missing)
sum(missing > 18000)
unique(missing)
temp = training[is.na(training$max_roll_belt),]
summary(temp)
missing = apply(X = temp, MARGIN = 2, FUN = function(x){sum(is.na(x))})
unique(missing)
sum(missing > 18000)
saveTrain = training
saveTest = testing
missing > 18000
which(missing > 18000)
?which
which(missing > 18000,arr.ind = TRUE)
training = training[,-which(missing > 18000,arr.ind = TRUE)]
summary(training)
training = training[,-c(3,4)]
summary(training)
unique(training$kurtosis_picth_arm)
unique(training$kurtosis_picth_belt)
temp = training[training$new_window == "yes",]
summary(temp)
summary(temp)
str(temp)
training = training[,-3]
library(caret)
nearZeroVar(training)
str(training)
nearZeroVar(training)
index = nearZeroVar(training)
training = training[,-index]
training = saveTrain
index = nearZeroVar(training)
training = training[,-index]
summary(training)
testing = testing[,-index]
training = training[,-c(1,3,4,5)]
training = saveTrain
## Let's check how many variables have > 18000 missing values
missing = apply(X = training, MARGIN = 2, FUN = function(x){sum(is.na(x))})
sum(missing > 18000)
unique(missing) # Seems that values that are missing are always 19216, lets check if once missing the rest are as well
temp = training[is.na(training$max_roll_belt),]
summary(temp)
missing = apply(X = temp, MARGIN = 2, FUN = function(x){sum(is.na(x))})
unique(missing)
sum(missing > 18000) # Yes, once a value is missing, it is similarly missing for the rest of the variables as well
testing = testing[,-index]
summary(testing)
str(training)
training = training[,-index]
summary(training)
str(training)
training = saveTrain
training = as.numeric(training)
training = apply(training,2, FUN = function(x) as.numeric(x))
warnings
warnings()
training = read.csv("pml-training.csv",stringsAsFactors = FALSE)
str(training)
training = read.csv("pml-training.csv")
training = read.csv("pml-training.csv", na.strings = c("NA","#DIV/0!",""))
indexDrop = nearZeroVar(training)
training = training[,-indexDrop]
library(caret)
indexDrop = nearZeroVar(training)
training = training[,-indexDrop]
missing = apply(X = training, MARGIN = 2, FUN = function(x){sum(is.na(x))})
training = training[,-which(missing > 18000,arr.ind = TRUE)]
training = training[,-c(1:6)]
set.seed(111)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
timer = Sys.time()
model = train(classe~., data = training,method = "rf",trControl = fitControl)
?trainControl
set.seed(111)
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 10)
timer = Sys.time()
model = train(classe~., data = training,method = "rf",trControl = fitControl)
Sys.time() - timer
vars = colnames(training)
test1 = testing[,colnames(testing) %in% vars]
testing = read.csv("pml-testing.csv", na.strings = c("NA","#DIV/0!",""))
test1 = testing[,colnames(testing) %in% vars]
View(temp)
pml
training = read.csv("pml-training.csv", na.strings = c("NA","#DIV/0!",""))
trainIndex = createDataPartition(training, times = 1, list = FALSE, p = 0.75)
trainIndex = createDataPartition(training, times = 1, list = FALSE, p = 0.7)
set.seed(3456)
trainIndex = createDataPartition(training$classe, times = 1, list = FALSE, p = 0.7)
train = training[trainIndex,]
test = training[-trainIndex,]
index = nearZeroVar(train, saveMetrics = TRUE)
indexDrop = nearZeroVar(train)
train = train[,-indexDrop]
summary(train)
missing = apply(X = train, MARGIN = 2, FUN = function(x){sum(is.na(x))})
sum(missing > 18000)
sum(missing > 12000)
sum(missing > 5000)
training = training[,-which(missing > 5000,arr.ind = TRUE)]
training = training[,-c(1:6)]
train = train[,-which(missing > 5000,arr.ind = TRUE)]
train = train[,-c(1:6)]
vars = colnames(train)
test = test[,colnames(test) %in% vars]
set.seed(111)
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 10)
timer = Sys.time()
model = train(classe~., data = train,method = "rf",trControl = fitControl)
Sys.time() - timer
testPred = predict(model, test)
confusionMatrix(testPred,test$classe)
cor(train)
cor(train[,-53])
cor(train[,-53]) > 0.8
t1 = cor(train[,-53]) > 0.8
View(t1)
training = read.csv("pml-training.csv", na.strings = c("NA","#DIV/0!",""))
summary(training)
nzvVar = nearZeroVar(training,saveMetrics = TRUE)
nzvVar
dropVar = nearZeroVar(training)
trainIndex = createDataPartition(training$classe, times = 1, list = FALSE, p = 0.7)
train = training[trainIndex,]
test = training[-trainIndex,]
dropVar = nearZeroVar(train)
train = train[,-dropVar]
missing = apply(X = train, MARGIN = 2, FUN = function(x){sum(is.na(x))})
train = train[,-which(missing > nrow(train)/2,arr.ind = TRUE)]
summary(training)
summary(train)
vars = colnames(train)
test = test[,colnames(test) %in% vars]
train = train[,-c(1:6)]
vars = colnames(train)
test = test[,colnames(test) %in% vars]
save.image("G:/John Hopkins Data Science Specialization Coursera/Practical Machine Learning/Course Project/Course Project.Rproj.RData")
set.seed(111)
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 10)
library(caret)
set.seed(111)
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 10)
?train
set.seed(111)
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 10,
lambda = 0.01)
logmodel = train(class~., data = train, method = "plr", trControl = fitControl)
getModelInfo(model = "plr")
set.seed(111)
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 10)
logmodel = train(class~., data = train, method = "plr", trControl = fitControl)
set.seed(111)
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 10)
logmodel = train(class~., data = train, method = "tree", trControl = fitControl)
logmodel = train(class~., data = train, method = "class", trControl = fitControl)
set.seed(111)
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 10)
logmodel = train(classe~., data = train, method = "plr", trControl = fitControl)
set.seed(111)
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 10)
logmodel = train(classe~., data = train, method = "class", trControl = fitControl)
set.seed(111)
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 10)
logmodel = train(classe~., data = train, method = "rpart", trControl = fitControl)
set.seed(111)
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 10)
knnmodel = train(classe~., data = train, method = "knn", trControl = fitControl)
?train
knnmodel = train(classe~., data = train, method = "knn", trControl = fitControl, preProcess = c("center", "scale"))
plot(knnmodel)
knnmodel
knntestPred = predict(model, test)
confusionMatrix(knntestPred,test$classe)
knntestPred = predict(model, test)
confusionMatrix(knntestPred,test$classe)
library(caret)
knntestPred = predict(model, test)
confusionMatrix(knntestPred,test$classe)
knntestPred = predict(knnmodel, test)
confusionMatrix(knntestPred,test$classe)
testPred = predict(model,test)
confusionMatrix(testPred,test$classe)
testing = testing[,colnames(testing) %in% vars]
finalpred = predict(model,testing)
finalpred
?seq
id = seq(from = 1, to = 20, by = 1)
finalpred$id = id
finalpred = predict(model,testing)
finalpred = as.data.frame(finalpred)
finalpred = cbind(id,finalpred)
finalpred
